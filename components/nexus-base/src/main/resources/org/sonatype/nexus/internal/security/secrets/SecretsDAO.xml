<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Sonatype Nexus (TM) Open Source Version
    Copyright (c) 2008-present Sonatype, Inc.
    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.

    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.

    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
    Eclipse Foundation. All other trademarks are the property of their respective owners.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.sonatype.nexus.internal.security.secrets.SecretsDAO">

  <insert id="createSchema">
    CREATE TABLE IF NOT EXISTS secrets (
      id              INT GENERATED BY DEFAULT AS IDENTITY,
      purpose         VARCHAR NOT NULL,
      key_id          VARCHAR,
      secret          VARCHAR NOT NULL,
      user_id         VARCHAR,
      created         TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
      last_updated    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,

      CONSTRAINT pk_secrets_id PRIMARY KEY (id)
    );

    CREATE INDEX IF NOT EXISTS idx_secrets_key_id ON secrets (key_id);
  </insert>

  <select id="read" resultType="org.sonatype.nexus.crypto.secrets.SecretData">
    SELECT *
      FROM secrets
     WHERE id = #{id};
  </select>

  <insert id="create" useGeneratedKeys="true" keyProperty="secretData.id">
    INSERT INTO secrets (purpose, key_id, secret, user_id)
    VALUES (#{secretData.purpose}, #{secretData.keyId}, #{secretData.secret}, #{secretData.userId});
  </insert>

  <delete id="delete">
    DELETE
      FROM secrets
     WHERE id = #{id};
  </delete>

  <update id="update">
    UPDATE secrets
    SET secret = #{secret},
        key_id = #{keyId},
        last_updated = CURRENT_TIMESTAMP
    WHERE id = #{id}
      AND secret = #{oldSecret}
  </update>

  <select id="existWithDifferentKeyId" resultType="boolean">
    SELECT EXISTS(SELECT 1 FROM secrets WHERE key_id &lt;&gt; #{keyId} OR key_id IS NULL);
  </select>

  <select id="fetchWithDifferentKeyId" resultType="org.sonatype.nexus.crypto.secrets.SecretData">
    SELECT *
      FROM secrets
      WHERE key_id &lt;&gt; #{keyId}
        OR key_id IS NULL
    LIMIT #{limit};
  </select>
</mapper>
